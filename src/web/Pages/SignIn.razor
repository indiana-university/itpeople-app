@using Microsoft.Extensions.Configuration
@using System.Web
@using System.Linq
@inject IConfiguration Configuration
@inject NavigationManager Navigation
@implements IDisposable
@page "/SignIn"

<div class="rvt-container rvt-container--senior rvt-container--center rvt-p-bottom-xl rvt-p-top-lg">
	<h1>Sign In</h1>
	<p>
		This page will do something at some point.
	</p>
	@if(string.IsNullOrWhiteSpace(Code))
	{
		<p>
			<button @onclick=@(() => ReallySignIn())>Really Sign In</button>
		</p>
	}
	<pre>Code: @Code</pre>
</div>
@code{
	private string Code;

	protected override void OnInitialized()
	{
		// Read the queryString from the Uri, if it has the value for Code set it and use it.
		var query = new Uri(Navigation.Uri).Query;
		var queryDict = HttpUtility.ParseQueryString(query);
		Code = queryDict.Get("code");

		if(string.IsNullOrWhiteSpace(Code) == false)
		{
			// Do the work to go fetch the JWT from UAA

			// Stash the JWT in storage so we can use it with all our API requests.
		}
		else
		{
			ReallySignIn();
		}
	}

	private string GetFromConfigOrThrowError(string configProperty)
	{
		var result = Configuration[configProperty];
		if(string.IsNullOrWhiteSpace(result))
		{
			throw new Exception($"Missing required environment setting: {configProperty}");
		}
		return result;
	}

	private void ReallySignIn()
	{
		var localUrl = GetFromConfigOrThrowError("APP_WEB_URL") + "/SignIn";
		var oauthUrl = GetFromConfigOrThrowError("UAA_OAUTH2_AUTH_URL");
		var clientId = GetFromConfigOrThrowError("UAA_OAUTH2_CLIENT_ID");
		var signInUri = $"{oauthUrl}?response_type=code&client_id={Uri.EscapeDataString(clientId)}&redirect_uri={Uri.EscapeDataString(localUrl)}";
		Navigation.NavigateTo(signInUri);
	}

	public void Dispose()
	{
	}
}