@using Microsoft.Extensions.Configuration
@using System.Web
@using System.Net
@using System.IdentityModel.Tokens.Jwt;
@using System.Linq
@using System.Text.Json.Serialization
@inject IConfiguration Configuration
@inject NavigationManager Navigation
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@implements IDisposable
@page "/SignIn"

<div class="rvt-container rvt-container--senior rvt-container--center rvt-p-bottom-xl rvt-p-top-lg">
	<h1>Sign In</h1>
	<p>
		This page will do something at some point.
	</p>
	@if(string.IsNullOrWhiteSpace(Code))
	{
		<p>
			<button @onclick=@(() => ReallySignIn())>Really Sign In</button>
		</p>
	}
	<pre>Code: @Code</pre>
</div>
@code{
	private string Code;
	private HttpClient client= new HttpClient();

	protected override async Task OnInitializedAsync()
	{
		// Read the queryString from the Uri, if it has the value for Code set it and use it.
		var query = new Uri(Navigation.Uri).Query;
		var queryDict = HttpUtility.ParseQueryString(query);
		Code = queryDict.Get("code");

		/* 	Work in Progress
			For now this only works with json-server which can be invoked in the projects root folder with the following command
			json-server --watch src/db.json --routes json_server/db.routes.json --port 3001 --middlewares ./json_server/db.middleware.auth.js ./json_server/db.middleware.admin.js ./json_server/db.middleware.routes.js
		*/
		if(string.IsNullOrWhiteSpace(Code) == false)
		{
			// Do the work to go fetch the JWT from UAA
			Console.WriteLine("Fetching token...");
			var baseUri = Utils.Env(Configuration, "API_URL", true);
			var jwtResp = await client.GetAsync($"{baseUri}/auth?oauth_code={Uri.EscapeDataString(Code)}");
			if(jwtResp.StatusCode != HttpStatusCode.OK)
			{
				throw new Exception($"Was unable to redeem the code for an oauth token got status code {jwtResp.StatusCode}.");
			}
			var jwt = await jwtResp.Content.ReadFromJsonAsync<JwtResponse>();
			var handler = new JwtSecurityTokenHandler();
			var usernameClaim = handler.ReadJwtToken(jwt.AccessToken).Claims.FirstOrDefault(x => x.Type == "user_name");
			if(usernameClaim == null) {
				throw new Exception($"Was unable to validate your identity.");
			}
			await sessionStorage.SetItemAsync("user", new AuthenticatedUser {
				AccessToken = jwt.AccessToken,
				Username = usernameClaim.Value
			});
 			
			// Send the user back to whence they came.
			// Use forceReload to make sure the header redraws.
			Navigation.NavigateTo("/", true);
			
			
		}
		else
		{
			ReallySignIn();
		}
	}
	public class JwtResponse
	{

		[JsonPropertyName("access_token")]
		public string AccessToken {get;set;}
	}
	private void ReallySignIn()
	{
		var localUrl = Utils.Env(Configuration, "APP_WEB_URL", true) + "/SignIn";
		var oauthUrl = Utils.Env(Configuration, "UAA_OAUTH2_AUTH_URL", true);
		var clientId = Utils.Env(Configuration, "UAA_OAUTH2_CLIENT_ID", true);
		var signInUri = $"{oauthUrl}?response_type=code&client_id={Uri.EscapeDataString(clientId)}&redirect_uri={Uri.EscapeDataString(localUrl)}";
		Navigation.NavigateTo(signInUri);
	}

	public void Dispose()
	{
	}
}